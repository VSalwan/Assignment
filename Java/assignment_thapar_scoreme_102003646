import java.util.*;

public class Graph {

    // Function to perform topological sort
    public static List<Integer> topologicalSort(List<List<int[]>> graph) {
        int n = graph.size();
        int[] inDegree = new int[n];
        for (int u = 0; u < n; u++) {
            for (int[] edge : graph.get(u)) {
                int v = edge[0];
                inDegree[v]++;
            }
        }

        Queue<Integer> queue = new ArrayDeque<>();
        for (int u = 0; u < n; u++) {
            if (inDegree[u] == 0) {
                queue.add(u);
            }
        }

        List<Integer> topoOrder = new ArrayList<>();
        while (!queue.isEmpty()) {
            int u = queue.poll();
            topoOrder.add(u);
            for (int[] edge : graph.get(u)) {
                int v = edge[0];
                inDegree[v]--;
                if (inDegree[v] == 0) {
                    queue.add(v);
                }
            }
        }

        return topoOrder;
    }

    // Function to find the longest path in a directed acyclic graph
    public static int longestPath(List<List<int[]>> graph) {
        int n = graph.size();
        List<Integer> topoOrder = topologicalSort(graph);
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MIN_VALUE);

        for (int u : topoOrder) {
            if (dist[u] == Integer.MIN_VALUE) {
                dist[u] = 0;
            }
            for (int[] edge : graph.get(u)) {
                int v = edge[0], w = edge[1];
                if (dist[u] + w > dist[v]) {
                    dist[v] = dist[u] + w;
                }
            }
        }

        int maxDist = Integer.MIN_VALUE;
        for (int d : dist) {
            maxDist = Math.max(maxDist, d);
        }
        return maxDist;
    }

    public static void main(String[] args) {
        List<List<int[]>> graph = new ArrayList<>();
        graph.add(Arrays.asList(new int[]{1, 3}, new int[]{2, 2}));
        graph.add(Arrays.asList(new int[]{3, 4}));
        graph.add(Arrays.asList(new int[]{3, 1}));
        graph.add(new ArrayList<>());

        System.out.println(longestPath(graph));  // Output: 7
    }
}
